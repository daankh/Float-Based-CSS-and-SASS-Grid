/*
0 - 600px:      phone
600 - 900px:    Tablet portrait mode
900 - 1200px: Tablet landscape mode
1200 - 1800px: is where our normal styles apply
1800px + : Big desktop
*/
/*
$breakpoint argument choices:
- phone
- tab-port
- tab-land
- big-desktop

1em = 16px => default
*/
.row {
  width: 100%;
  max-width: 114rem;
  margin: 0 auto;
}

.row:not(:last-of-type) {
  margin-bottom: 8rem;
}

@media (max-width: 56.25em) {
  .row:not(:last-of-type) {
    margin-bottom: 6rem;
  }
}

@media (max-width: 56.25em) {
  .row {
    max-width: 70rem;
    padding: 0 3rem;
  }
}

.row::after {
  content: "";
  display: block;
  clear: both;
}

.row div[class^="col-"] {
  float: left;
}

.row div[class^="col-"]:not(:last-of-type) {
  margin-right: 6rem;
}

@media (max-width: 56.25em) {
  .row div[class^="col-"]:not(:last-of-type) {
    margin-right: 0;
    margin-bottom: 6rem;
  }
}

@media (max-width: 56.25em) {
  .row div[class^="col-"] {
    width: 100%;
  }
}

.row .col-1-of-2 {
  width: calc((100% - 6rem) / 2);
}

.row .col-1-of-3 {
  width: calc((100% - 2 * 6rem) / 3);
}

.row .col-2-of-3 {
  width: calc(2 * ((100% - 2 * 6rem) / 3) + 6rem);
}

.row .col-1-of-4 {
  width: calc((100% - 3 * 6rem) / 4);
}

.row .col-2-of-4 {
  width: calc(2 * ((100% - 3 * 6rem) / 4) + 6rem);
}

.row .col-3-of-4 {
  width: calc(3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem);
}

.box {
  background-color: #008080;
  color: #fff;
  font-size: 2rem;
  text-align: center;
  padding: 10px 0;
}

/* ---------------------------------------------------------- */
/* --- RESET --- */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

@media (min-width: 112.5em) {
  html {
    font-size: 72%;
  }
}

@media (max-width: 75em) {
  html {
    font-size: 56.25%;
  }
}

@media (max-width: 56.25em) {
  html {
    font-size: 50%;
  }
}

body {
  box-sizing: border-box;
  padding: 3rem;
}

@media (min-width: 112.5em) {
  body {
    padding: 0;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
